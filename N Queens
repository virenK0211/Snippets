def print_board(board):
    """Utility function to print the N-Queens board."""
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col, n):
    """Check if it's safe to place a queen at board[row][col]."""
    # Check this row on the left side
    for i in range(col):
        if board[row][i]:
            return False

    # Check upper diagonal on the left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j]:
            return False

    # Check lower diagonal on the left side
    for i, j in zip(range(row, n), range(col, -1, -1)):
        if board[i][j]:
            return False

    return True

def solve_n_queens_util(board, col, n):
    """Utilize backtracking to solve the N-Queens problem."""
    if col >= n:
        return True

    # Try placing a queen in all rows one by one
    for i in range(n):
        if is_safe(board, i, col, n):
            # Place the queen
            board[i][col] = 1

            # Recur to place the rest of the queens
            if solve_n_queens_util(board, col + 1, n):
                return True

            # If placing queen doesn't lead to a solution, backtrack
            board[i][col] = 0

    return False

def solve_n_queens(n):
    """Solve the N-Queens problem and print the solution."""
    board = [[0 for _ in range(n)] for _ in range(n)]

    if not solve_n_queens_util(board, 0, n):
        print("No solution exists")
        return False

    print_board(board)
    return True

# Example usage:
n = 8  # Change this to any N you want to solve
solve_n_queens(n)
